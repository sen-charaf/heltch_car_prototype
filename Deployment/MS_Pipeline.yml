name: LiadTech Pern Stack Pipeline SonarQube Deploiement 

trigger:
  branches:
    include:
      - master
      - development
pr:
  branches:
    include:
       - master

pool:
  vmImage: 'ubuntu-22.04'

variables:
  - group: LiadTechMernHealthCare-SECRETS
  - name: NODE_VERSION
    value: '19.x'
  - name: npm_config_cache
    value: $(Pipeline.Workspace)/.npm
  - name: sonarQubeServiceConnection
    value: 'SonarQubeHealthCare'

stages:
- stage: Build
  displayName: 'Compilation et Tests'
  jobs:
  - job: BuildAndTest
    displayName: 'Build et Tests du Projet'
    steps:
    - script: |
        echo "Affichage du contenu du r√©pertoire source :"
        ls -R $(Build.SourcesDirectory)
      displayName: 'D√©boguer structure du projet'

    - task: JavaToolInstaller@1
      inputs:
        versionSpec: '17'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
    - script: |
        echo "##vso[task.setvariable variable=JAVA_HOME]$(JAVA_HOME_17_X64)"

    - task: NodeTool@0
      inputs:
        versionSpec: '$(NODE_VERSION)'
      displayName: 'Installer Node.js'

    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)"'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: $(npm_config_cache)
      displayName: 'Cache npm'
      continueOnError: true

    - script: |
            set -e
            BACKEND_DIR=$(find $(Build.SourcesDirectory) -type d -name "back_end" | head -n 1)
            FRONTEND_DIR=$(find $(Build.SourcesDirectory) -type d -name "front_end" | head -n 1)
            echo "Installation des d√©pendances..."
            cd "$BACKEND_DIR" && npm install 
            cd "$FRONTEND_DIR" && npm install 
      displayName: 'Installer les d√©pendances'

    - script: |
        set -e
        BACKEND_DIR=$(find $(Build.SourcesDirectory) -type d -name "back_end" | head -n 1)
        echo "Ex√©cution des tests Backend..."
        cd "$BACKEND_DIR"
        npm run test || true
        #npm run test:ci || true
      displayName: 'Ex√©cuter les tests'
      continueOnError: true

    - script: |
        echo "Structure apr√®s install & build :"
        find $(Build.SourcesDirectory) -type f
      displayName: 'Afficher fichiers projet'

    - script: |
        echo "Supprimer SONARQUBE_SCANNER_PARAMS"
        echo "##vso[task.setvariable variable=SONARQUBE_SCANNER_PARAMS;issecret=true]{}"
      displayName: 'Neutraliser param√®tres sonar.branch.name'

    - task: SonarQubePrepare@7
      inputs:
        SonarQube: '$(sonarQubeServiceConnection)'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'LiadTechMernStackHealthCare'
        cliProjectName: 'LiadTechMernStackHealthCare'
        cliSources: 'back_end,front_end'
        extraProperties: | 
            sonar.projectKey=LiadTechMernStackHealthCare
            sonar.projectName=LiadTechMernStackHealthCare
            sonar.sourceEncoding=UTF-8
            sonar.sources=back_end,front_end
            sonar.exclusions=**/node_modules/**,**/build/**,**/dist/**,**/*.png,**/*.jpg,**/*.jpeg,**/*.gif,**/*.svg,**/*.woff,**/*.woff2,**/*.eot,**/*.ttf,**/*.otf
            sonar.qualitygate.wait=false
      displayName: 'Pr√©parer analyse SonarQube'

    - task: SonarQubeAnalyze@7
      displayName: 'Analyser avec SonarQube'
    
    - task: SonarQubePublish@7
      inputs:
        pollingTimeoutSec: '300'
      displayName: 'Publier r√©sultats SonarQube'

- stage: rapport
  displayName: 'G√©n√©rer rapport SonarQube (HTML, PDF)'
  jobs:
    - job: Generation_des_rapports
      displayName: 'G√©n√©ration des rapports'
      steps:
        - task: Bash@3
          displayName: 'Installer d√©pendances'
          inputs:
            targetType: 'inline'
            workingDirectory: '$(Build.SourcesDirectory)/Deployment/scripts'
            script: |
              echo "Nettoyage des d√©pendances"
              rm -rf node_modules package-lock.json
              npm install blob
              npm install

        - task: Bash@3
          displayName: 'G√©n√©rer rapport SonarQube'
          env:
            SONAR_HOST_URL: $(SONAR_HOST_URL)
            SONAR_TOKEN: $(SONAR_TOKEN)
          inputs:
            targetType: 'inline'
            workingDirectory: '$(Build.SourcesDirectory)/Deployment/scripts'
            script: |
              node generate-report.js

        - task: PublishBuildArtifacts@1
          displayName: 'Publier rapports SonarQube'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/Deployment/output'
            ArtifactName: 'sonar-reports'
            publishLocation: 'Container'


- stage: Deploy
  displayName: 'D√©ploiement avec Ansible'
  jobs:
    - job: DeployApp
      displayName: 'D√©ploiement Ansible via Azure Task'
      pool:
        name: Default  
      steps:

        - script: |
            echo "Chemin de travail : $(System.DefaultWorkingDirectory)"
            echo "Affichage du contenu du r√©pertoire Ansible :"
            ls -la $(System.DefaultWorkingDirectory)/Deployment/ansible
            echo "Chemin absolu du playbook :"
            readlink -f $(System.DefaultWorkingDirectory)/Deployment/ansible/playbook.yml
            echo "Contenu du fichier d'inventaire :"
            cat $(System.DefaultWorkingDirectory)/Deployment/ansible/inventory.ini
          displayName: 'üîç V√©rification des fichiers Ansible'

        - task: Bash@3
          displayName: 'Ex√©cution du playbook Ansible'
          inputs:
            targetType: 'inline'
            workingDirectory: '$(System.DefaultWorkingDirectory)/Deployment/ansible'
            script: |
              echo " V√©rification du playbook :"
              ls -l playbook.yml

              echo " R√©pertoire source Azure DevOps : $(Build.SourcesDirectory)"
              
              echo " D√©marrage du playbook Ansible avec passage du chemin source..."
              ansible-playbook -i inventory.ini playbook.yml -e "source_dir=$(Build.SourcesDirectory)" -u mern-liadtech -b -vvv

#NV Un scan DAST est en cours dans le cadre du stage, r√©alis√© avec ZAP.

- stage: PerformanceTesting
  displayName: "Performance Testing"
  jobs:
    - job: Lighthouse
      displayName: "Lighthouse Test "
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: "18.x"
          displayName: "Install Node.js"

        - script: |
            cd LiadTech_Frontend
            npm install
            npm run build

            npm install -g serve
            serve -s build -l 3000 &
            sleep 15
          displayName: "Build and Serve "

        - script: |
            npm install -g lighthouse
            mkdir -p $(Build.ArtifactStagingDirectory)/performance-reports
          displayName: "Install Lighthouse CLI"

        - script: |
            lighthouse http://192.99.35.79:9000 \
              --chrome-flags="--headless --no-sandbox --disable-gpu" \
              --output=json --output=html \
              --output-path=$(Build.ArtifactStagingDirectory)/performance-reports/lighthouse-report \
              --quiet
          displayName: "Run Lighthouse Test"

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: "$(Build.ArtifactStagingDirectory)/performance-reports"
            ArtifactName: "Performance-Reports"
            publishLocation: "Container"
          displayName: "Publish Lighthouse Reports"